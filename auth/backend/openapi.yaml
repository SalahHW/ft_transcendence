openapi: 3.0.0
info:
  title: Auth Service – ft_transcendence
  version: 1.0.0
  description: API d’authentification basée sur Fastify avec JWT stateless.

servers:
  - url: http://localhost:4000
    description: Serveur local

paths:
  /auth/register:
    post:
      summary: Créer un nouvel utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: test@example.com
                password:
                  type: string
                  example: azerty123
      responses:
        '201':
          description: JWT access + refresh token
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  refreshToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '409':
          description: Email déjà enregistré

  /auth/login:
    post:
      summary: Connecter un utilisateur existant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: test@example.com
                password:
                  type: string
                  example: azerty123
      responses:
        '200':
          description: JWT access + refresh token
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  refreshToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Email ou mot de passe invalide

  /auth/refresh:
    post:
      summary: Générer un nouveau access token à partir d’un refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        '200':
          description: Nouvelle paire de tokens
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  refreshToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Refresh token invalide ou expiré

  /auth/me:
    get:
      summary: Obtenir les infos de l’utilisateur connecté
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Infos de l’utilisateur connecté
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 2
                      email:
                        type: string
                        example: test@example.com
                      iat:
                        type: integer
                        example: 1744372254
        '401':
          description: Token manquant ou invalide

  /auth/verify-token:
    get:
      summary: Vérifie un token JWT
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Données de l’utilisateur si token valide
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    example: true
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 2
                      email:
                        type: string
                        example: test@example.com
                      iat:
                        type: integer
                        example: 1744372254
        '401':
          description: Token invalide ou manquant

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
